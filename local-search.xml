<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 基础知识</title>
    <link href="/2022/09/26/basic-linux-command/"/>
    <url>/2022/09/26/basic-linux-command/</url>
    
    <content type="html"><![CDATA[<p>介绍Linux相关的基础知识，简单描述了Linux基础概率以及一些常用命令，如：ls、cd、mkdir、vi、cat、cp等。</p><span id="more"></span><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ol><li><p>Linux系统与Windows一样有着文件管理，文件的路径又分绝对路径和相对路径。绝对路径是以&#x2F;开始，例如&#x2F;usr&#x2F;local，而相对路径不以&#x2F;开始，例如..&#x2F;，这个就是当前目录的上一层</p></li><li><p>在Linux系统中，不同用户有着不同的<strong>家目录</strong>（也就是不同用户登陆上Linux初始位置）。如果你以root账号登陆，家目录就是&#x2F;root&#x2F;，如果你以普通用户xxx登陆，那么系统默认的家目录就是&#x2F;home&#x2F;xxx&#x2F;，当然也可以指定普通用户的家目录为其他目录，在后续文章会补充</p></li><li><p>环境变量，分成两种全局环境变量和个人环境变量：</p><ul><li><p>全局环境变量</p><p>Linux中&#x2F;etc&#x2F;profile就是全局变量，无论你用哪个用户登录都可以使用该文件里的所有变量，增加变量只需要在文件末尾增添代码，且使用以下命令使其生效：</p><p><code>. /etc/profile</code><br>或者<br><code>source /etc/profile</code></p></li><li><p>个人环境变量</p><p>只针对个人用户，存放的路径就在 <strong>~&#x2F;.bash_profile</strong> 中，打开该文件你会发现它其实还涉及到另一个文件 <strong>~&#x2F;.bashrc</strong>，所以如果你要设置变量，也是在两个文件末尾添加代码，但是建议使用 <strong>~&#x2F;.bashrc</strong>。生效命令如下：</p><p><code>source ~/.bash_profile</code>    <code>source ~/.bashrc</code></p></li></ul></li><li><p>进程与端口</p><ul><li>查看进程是工作中使用频率较高的需求，一般来说使用的就是<code>ps -ef | grep xxx</code>，一般kill命令与此相搭配，<code>kill -9 pid</code> 杀死pid的进程。不过生产上执行该命令之前，一定要确认清楚：1. <strong>该进程是否真的杀？</strong>；2. <strong>杀的进程是否你想要杀？</strong>。</li></ul><p>​      这里也提供批量杀进程，<code>kill -9 $(pgrep -f xxx)</code>，杀掉与xxx相关的命令，但是这个命令也会<strong>误杀掉你不想杀掉的同名的xxx进程，不建议使用。</strong></p><ul><li><p>怎么查看服务使用的端口呢？一般使用的都是<code>netstat -nlp | grep pid</code>，这个就可以与上面的结合使用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sshd服务有许多进程，主要关注pid和父pid</span><br>[root@hadoop001 ~]# ps -ef | grep sshd<br>root      3315     1  0 14:13 ?        00:00:00 /usr/sbin/sshd -D   &lt;-- 主要<br>root      8816  3315  0 22:05 ?        00:00:00 sshd: root@pts/0<br>root      9776  3315  0 22:10 ?        00:00:00 sshd: root@pts/1<br>root      9834  3315  0 22:10 ?        00:00:00 sshd: root@pts/2<br>root     11499  8818  0 22:27 pts/0    00:00:00 grep --color=auto sshd<br><br>[root@hadoop001 ~]# netstat -nlp | grep 3315<br>tcp        0     0   0.0.0.0:22      0.0.0.0:*       LISTEN      3315/sshd           <br>tcp6       0     0   :::22           :::*            LISTEN      3315/sshd<br></code></pre></td></tr></table></figure><p>通过上述可以看出sshd服务的端口是22，<strong>而且22前面的要是机器的ip或0.0.0.0 或 :::，表示对外的任意ip可以服务，但是127.0.0.1或localhost,只能在这台的机器上访问这个服务。</strong><br>所以，如果你想要看一个的服务的端口，流程就是服务名称 -&gt; pid -&gt; port。</p></li></ul></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p><em>pwd</em>，查看当前目录的绝对路径，显示是从&#x2F;开始</p></li><li><p><em>ls</em>，查看当前路径下的文件或文件夹</p><blockquote><p>ls &#x2F; 只显示该目录下的文件或文件夹的名称<br>ls -l &#x2F; 显示该目录下的文件或文件夹的明细信息，ls -l &#x3D;&#x3D;&gt;ll，更多用ll代替<br>ll -h 查看文件大小，只能看文件不能看文件夹，如果想看文件夹大小，请使用du -sh 文件或文件夹名<br>ll -rt 给文件或文件夹以时间排序，可以找出最新的文件或文件夹</p></blockquote></li><li><p><em>cd</em>，切换目录</p><blockquote><p>cd -    回到上一次目录<br>cd ..&#x2F;  回退上一层目录（相对路径）<br>cd ..&#x2F;..&#x2F; 回退2个目录（相对路径）</p></blockquote></li><li><p><em>mkdir</em>，创建文件夹</p><blockquote><p>mkdir xxx 只能创建1个<br>mkdir -p xxx&#x2F;1&#x2F;2 级联创建文件夹<br>mkdir 4 5 6 并行创建4 5 6 文件夹</p></blockquote></li><li><p>ln -s 源文件路径 软链接所在路径</p><blockquote><p>以下两个场景会用到：<br>第一个场景，比如你的代码中使用的是&#x2F;xxx&#x2F;ruozedatav1.0路径，但是某天需要升级要使用的路径变成了&#x2F;xxx&#x2F;ruozedatav2.0。你不可能会去改代码中的路径，所以这个时候就需要软链接</p><p>第二个场景就是，当你代码中使用的路径磁盘快满了，需要更换到另一个容量较大的磁盘路径时。<strong>当然要注意权限与之前一致</strong></p></blockquote></li><li><p><em>cp</em>，复制拷贝文件&#x2F;文件夹</p><blockquote><p>cp -r xx xx&#x2F;     文件夹拷贝 需要-r参数</p></blockquote></li><li><p><em>mv</em>，移动或改名文件&#x2F;文件夹</p><blockquote><p>mv test.log test                移动文件到新的地方 名称不变<br>mv test1.log  test&#x2F;test123.log 移动文件到新的地方 名称变<br>mv test1 test  移动文件夹</p></blockquote></li><li><p><em>cat&#x2F;more&#x2F;less</em>，查看文件内容</p><blockquote><p>cat  文件内容一下子全部显示 适用字节内容较少<br> 查看日志的内容ERROR 定位错误<br>假如文件超大 10m   发送给window电脑，通过editplus 全局搜索<br>假如文件假如100m+（grep -C 是指搜索”ERROR”前后10行）<br>cat install.log | grep -C 10 “ERROR”<br>假如 ERROR筛选的结果 特多(&gt; 重定向覆盖输出到文件，&gt;&gt; 追加)<br>cat install.log | grep -C 10 “ERROR” &gt; error.log<br>more 文件内容一页一页的往下翻 按空格键往下<br>回退不了 按q退出   适用字节内容稍多的<br>less 文件内容 一行行 按箭头上下  按q退出</p></blockquote></li><li><p><em>tail</em>，实时查看</p><blockquote><p>实际工作中，对于日志总会面临日志过大的问题，一般使用切割法。<br>到达某个数值，mv xxx.log xxx.log1，然后再touch xxx.log。<br>推荐使用 tail -F xxx.log，-F&#x3D;-f+retry，-f 不够强大，文件只要被移走，就算新的一模一样，也不会实时监控</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@hadoop001 ~]# tail -F xxx.log <br>123<br>4<br>tail: `xxx.log&#x27; has become inaccessible: No such file or directory<br>tail: `xxx.log&#x27; has appeared;  following end of new file<br>5<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>但是如果你要看以倒数50行开始的日志，只能是tail -50f xxx.log</p></blockquote><ul><li><p>下载与上传</p><blockquote><p>rz 命令，选择window的文件传输<br>sz filename 命令，将Linux的文件传输给window。<em>这里如果你使用的是Xshell的话，请在会话的属性中检查是否使用指定下载地址。</em><br>如果上述命令，Linux报找不到，执行 yum install lrzsz</p></blockquote></li><li><p><em>help</em>，命令帮助</p><blockquote><p>命令 –help<br>例如:<br>[root@hadoop001 ~]# ls –help<br>Usage: ls [OPTION]… [FILE]…<br>[]代表可以省略</p></blockquote></li><li><p>alias，别名</p><p>上面提到ls -l&#x3D;ll，这个就是Linux中的别名，使用alias可以查看系统默认的别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop001 ~]# alias<br>alias cp=&#x27;cp -i&#x27;<br>alias egrep=&#x27;egrep --color=auto&#x27;<br>alias fgrep=&#x27;fgrep --color=auto&#x27;<br>alias grep=&#x27;grep --color=auto&#x27;<br>alias l.=&#x27;ls -d .* --color=auto&#x27;<br>alias ll=&#x27;ls -l --color=auto&#x27;<br>alias ls=&#x27;ls --color=auto&#x27;<br>alias mv=&#x27;mv -i&#x27;<br>alias rm=&#x27;rm -i&#x27;<br>alias which=&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;<br></code></pre></td></tr></table></figure></li></ul><p>​      <em>注意：使用<strong>alias 别名&#x3D;命令字符串</strong>就可以在当前session会话中生效，如果你想要一直生效，请在<strong>环境变量文件末</strong>中增添上述命令</em></p><ul><li><p>rm，删除</p><blockquote><p>一般都是使用 rm -rf 文件名，这种方式会强制删除文件或者文件夹，**-f表示强制，-r表示可以文件夹**。经常听到就是 rm -rf &#x2F;*，也就是删库跑路。当然一般人都不会这样直接运行，但是可能会在shell脚本出现这种错，以下场景就导致这种情况。</p><p>shell脚本可能会这样<br>xxxpath&#x3D;xxx&#x2F;xx<br>…（逻辑部分）<br>rm -rf $xxxpath&#x2F;*    这里就是个坑</p><p>如果一空值赋予给了xxxpath，那么不就成了rm -rf &#x2F;*<br>所以在生产上凡是碰见rm -rf强制删除文件夹的，路径一定先判断存在不，不存在 就skip；就存在就rm</p></blockquote></li><li><p>history，历史记录</p><blockquote><p>history -c 就是清除命令记录，当然个人用户登陆时，~&#x2F;.bash_history也会记录命令，所以要清除的话，记得也把它给删掉</p></blockquote></li><li><p>用户&#x2F;用户组命令集合</p><ul><li>useradd 用户名，添加用户，它的家目录就在&#x2F;home&#x2F;用户名</li><li>id 用户名，显示用户和用户组信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop001 ~]# id dengdi<br>uid=1001(dengdi) gid=1001(dengdi) groups=1001(dengdi)<br>用户ID             主组ID           所有组<br></code></pre></td></tr></table></figure><ul><li><p>cat &#x2F;etc&#x2F;passwd，显示所有用户的信息</p><blockquote><p>dengdi(用户名) : x :1001(用户id):1001(主组id)::&#x2F;home&#x2F;dengdi(家目录):&#x2F;bin&#x2F;bash(执行解释器)  </p><p>如果&#x2F;bin&#x2F;bash变成&#x2F;bin&#x2F;false或者&#x2F;sbin&#x2F;nologin，这个用户就不能登陆了</p></blockquote></li><li><p>userdel 用户名，删除用户</p><blockquote><p>删除用户，会把&#x2F;etc&#x2F;passwd记录删除；<br>同时假如该组没有其他用户，则删除该组<br>但是 家目录还在,但是用户和用户组 发生变革</p></blockquote></li></ul></li></ul><p>一个特别的现象：执行userdel然后再useradd，会提示以下消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop001 ~]# userdel dengdi<br>[root@hadoop001 ~]# useradd dengdi<br>useradd: warning: the home directory already exists.<br>Not copying any file from skel directory into it.<br>Creating mailbox file: File exists<br></code></pre></td></tr></table></figure><p>这里提示的<strong>skel directory</strong>就是.bash*所有的隐藏文件，我们尝试将这些删除然后切换dengdi用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop001 ~]# ll -a /home/dengdi/<br>total 12<br>drwx------  2 dengdi dengdi  59 Jun 17 23:48 .<br>drwxr-xr-x. 4 root   root    32 Jun 17 23:48 ..<br>-rw-r--r--  1 dengdi dengdi  18 Apr 11  2018 .bash_logout<br>-rw-r--r--  1 dengdi dengdi 193 Apr 11  2018 .bash_profile<br>-rw-r--r--  1 dengdi dengdi 231 Apr 11  2018 .bashrc<br>[root@hadoop001 ~]# ll -a /home/dengdi/<br>total 16<br>drwx------  2 dengdi dengdi  79 Jun 18 00:06 .<br>drwxr-xr-x. 4 root   root    32 Jun 17 23:48 ..<br>-rw-------  1 dengdi dengdi   5 Jun 18 00:06 .bash_history<br>-rw-r--r--  1 dengdi dengdi  18 Apr 11  2018 .bash_logout<br>-rw-r--r--  1 dengdi dengdi 193 Apr 11  2018 .bash_profile<br>-rw-r--r--  1 dengdi dengdi 231 Apr 11  2018 .bashrc<br>[root@hadoop001 ~]# rm -rf /home/dengdi/.*<br>rm: refusing to remove ‘.’ or ‘..’ directory: skipping ‘/home/dengdi/.’<br>rm: refusing to remove ‘.’ or ‘..’ directory: skipping ‘/home/dengdi/..’<br>[root@hadoop001 ~]# ll -a /home/dengdi/<br>total 0<br>drwx------  2 dengdi dengdi  6 Jun 18 00:08 .<br>drwxr-xr-x. 4 root   root   32 Jun 17 23:48 ..<br>[root@hadoop001 ~]# su - dengdi<br>Last login: Tue Jun 18 00:07:26 CST 2019 on pts/0<br>-bash-4.2$<br></code></pre></td></tr></table></figure><p>所以skel directory是决定你的[root@hadoop001 ~]还是-bash-4.2$</p><ul><li><p>groupadd 用户组，新增用户组</p></li><li><p>usermod -a -G 用户组 dengdi， 添加用户组新成员为dengdi</p></li><li><p>usermod -g 用户组 dengdi， 修改xxx为主组，重新指定主组之后，会丢失原来的主组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop001 ~]# groupadd bigdata<br>[root@hadoop001 ~]# id ruoze<br>uid=501(ruoze) gid=501(ruoze) groups=501(ruoze)<br>[root@hadoop001 ~]# usermod -a -G bigdata ruoze<br>[root@hadoop001 ~]# id ruoze<br>uid=501(ruoze) gid=501(ruoze) groups=501(ruoze),502(bigdata)<br>[root@hadoop001 ~]# usermod -g bigdata ruoze<br>[root@hadoop001 ~]# id ruoze<br>uid=501(ruoze) gid=502(bigdata) groups=502(bigdata)<br></code></pre></td></tr></table></figure></li><li><p>usermod -d 路径 用户，重新指定用户家目录</p></li><li><p>su，切换用户</p><blockquote><p>su ruoze   切换用户 当前路径不会变，就是切换之前的路径<br>su - ruoze 切换用户 且切到该用户的家目录，且执行环境变量文件生效</p></blockquote></li><li><p>sudo，普通用户拥有root权限</p><blockquote><p>在文件&#x2F;etc&#x2F;sudoers末尾加上， <code>xxx     ALL=(root)      NOPASSWD:ALL </code>，就能赋予普通用户的sudo</p></blockquote></li><li><p>passwd 用户, 设置密码或者重置密码</p></li><li><p>find，搜索</p><blockquote><p>如果我们要搜索一个叫做tail的文件，命令搜索’tail’(完全匹配)&#x2F;‘<em>tail</em>‘(模糊查询，使用较多)<br>find &#x2F; -name ‘<em>tail</em>‘  –&gt; 在所有路径下搜索符合的，使用较少<br>find &#x2F;root -name ‘<em>tail</em>‘ –&gt; 指定路径下搜索<br>find .&#x2F; -name ‘<em>tail</em>‘  –&gt; 当前路径下搜索</p></blockquote></li><li><p>rpm安装</p><blockquote><p>如果直接安装，可能会安装到一部分或者是你不想要的<br>yum search xxx<br>这个命令会在安装过程可能会提示你按Y&#x2F;N，-y选项就会省略这些<br>yum install xxx<br>卸载xxx以及依赖<br>yum remove xxx<br>rpm卸载但是不检查依赖<br>rpm -e –nodeps xxx<br>查看本机上已安装的xxx<br>rpm -qa | grep xxx</p></blockquote></li><li><p>which，找命令在哪个路径下</p><blockquote><p>命令在PATH变量中一旦在一个路径下找到之后，后面的路径不在寻找， 谨记：<code>PATH=$xxx:$PATH</code></p></blockquote></li><li><p>查看ip</p><blockquote><p>window: ipconfig<br>linux: ifconfig</p><p>window: telnet 客户端命令<br>控制面板 删除程序 打开或关闭window功能</p><p>a、查看端口号80对应的地址是否ip或者0.0.0.0或者:::<br>b、当前机器的防火墙是否关闭，一般云主机是关闭的，因为是通过他们的安全组设置<br>c、在另外一台机器，ping telnet<br>telnet 内网ip 和 端口号<br>telent 外网ip 和 端口号</p><p>d、日志查看了 无error<br>f、重新指定一个端口验证 </p></blockquote></li><li><p>权限</p><blockquote><p><code>chmod</code>和<code>chown</code>。<code>chmod</code>是改变文件读写执行权限，<code>chown</code>是改变文件所属用户和用户组。这两个组成文件的权限体系，查看文件权限需要两者结合来看</p><p>drwxr-xr-x. 2 root root      4096 Jun 12 22:41 Downloads<br>-rw-r–r–.    1 root root       1012 Jun 15 21:46  error.log<br>第一位字母: d是文件夹 -是文件 l是连接</p><p>命令实例(只有chown和chmod使用-R)：<br>chown -R jepson:jepson ruozedata<br>chmod -R 777  ruozedata  –&gt; 777 代表所有人都有最大权限 读写执</p><p>r 读4<br>w 写2<br>x 执行 1 shell脚本</p><ul><li>0 没有任何权限</li></ul><p>rwx r-x r-x<br>第一组 rwx 7 代表文件和文件夹所属的 用户的权限: 读写执<br>第二组 r-x 5 代表文件和文件夹所属的 用户组的权限: 读执<br>第三组 r-x 5 代表其他组的所有用户对这个文件或文件夹权限: 读执</p></blockquote></li><li><p>压缩与解压</p><blockquote><p>tar -zxvf xxx.tag.gz  –&gt; 解压，加上-C可以指定解压到某个路径<br>tar -cxvf xxx.tag.gz &#x2F;xxx&#x2F;xxx&#x2F;* –&gt; 压缩</p><p>unzip xxx.zip  –&gt; 解压<br>zip xxx.zip &#x2F;xx&#x2F;xx&#x2F;* –&gt; 压缩</p></blockquote></li><li><p>其他系统命令</p><blockquote><p>free -m  查看内存使用情况<br>[root@hadoop001 ~]# free -m<br>          total        used        free      shared  buff&#x2F;cache   available<br>Mem:          15885         292       13054         163        2537       15107<br>Swap:             0           0           0<br>记得buff&#x2F;cache都是算作内存一部分哦</p><p>df -h 查看磁盘使用情况<br>[root@hadoop001 ~]# df -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>&#x2F;dev&#x2F;vda1        40G  4.3G   36G  11% &#x2F;<br>devtmpfs        7.8G     0  7.8G   0% &#x2F;dev<br>tmpfs           7.8G   16K  7.8G   1% &#x2F;dev&#x2F;shm<br>tmpfs           7.8G  164M  7.6G   3% &#x2F;run<br>tmpfs           7.8G     0  7.8G   0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br>tmpfs           1.6G     0  1.6G   0% &#x2F;run&#x2F;user&#x2F;0</p><p>top 实时查看整个服务器情况<br>面板第一行有个load average: 0.00, 0.00, 0.00，这个三个数代表1min，5min，15min服务器的负载。<br>一般来说三个数在10以下都是比较稳定的。</p></blockquote></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/24/hello-world/"/>
    <url>/2022/09/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
